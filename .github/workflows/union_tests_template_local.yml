name: Rust Union Local Tests Template

on:
  workflow_call:
    inputs:
      repo: 
        description: 'Repository to check out'
        required: true
        type: string
      submodule_path:
        description: 'Path to the submodule within the repository'
        required: true
        type: string
      nightly:
        description: 'Flag to determine if nightly triggered'
        required: false
        type: boolean
      cargo_features:
        description: 'Cargo features to enable (space or comma separated)'
        required: false
        type: string
    secrets:
      REPO_ACCESS_TOKEN:
        description: 'Token to access the repository'
        required: true
      SSH_PRIVATE_KEY:
        description: 'Private SSH key to authenticate with GitHub'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Webhook endpoint to post on channel'
        required: false

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: read

jobs:
  local_test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ROOT: "/home/runner/work/${{ github.event.repository.name }}"
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH: ${{ github.head_ref || 'main' }}
      BITCOIN_NETWORK: "regtest"
      BITCOIND_RPC_PORT: 18443
      BITCOIND_RPC_USER: foo
      BITCOIND_RPC_PASSWORD: rpcpassword
      BITCOIND_RPC_NETWORK: regtest

    steps:
      - name: Debug inputs
        run: |
          echo "All inputs:"
          echo "repo=${{ inputs.repo }}"
          echo "submodule_path=${{ inputs.submodule_path }}"

      - name: Validate Inputs
        run: |
          ERRORS=()          
          
          [[ -z "${{ inputs.repo }}" ]] && ERRORS+=("'repo' input cannot be empty")
          [[ -z "${{ inputs.submodule_path }}" ]] && ERRORS+=("'submodule_path' input cannot be empty")
          
          if [[ ! "${{ inputs.repo }}" =~ ^[a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+$ ]]; then
            ERRORS+=("'repo' must be in format 'owner/repo'")
          fi
          
          if [[ ! "${{ inputs.submodule_path }}" =~ ^[a-zA-Z0-9_\-]+$ ]]; then
            ERRORS+=("'submodule_path' contains invalid characters")
          fi
          
          if [[ -n "${{ inputs.cargo_features }}" ]]; then
            if [[ ! "${{ inputs.cargo_features }}" =~ ^[a-zA-Z0-9_,-]+$ ]]; then
              ERRORS+=("'cargo_features' contains invalid characters")
            fi
          fi
          
          if [[ ${#ERRORS[@]} -gt 0 ]]; then
            printf "❌ Validation errors:\n"
            printf "  - %s\n" "${ERRORS[@]}"
            exit 1
          fi
          echo "✅ All inputs validated successfully"

      - name: Check disk space
        run: df -h

      # - name: Set up SSH key for submodule cloning
      #   run: |
      #     mkdir -p ~/.ssh
      #     echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
      #     chmod 600 ~/.ssh/id_rsa
      #     sed -i 's/-----BEGIN OPENSSH PRIVATE KEY-----//g' ~/.ssh/id_rsa
      #     sed -i 's/-----END OPENSSH PRIVATE KEY-----//g' ~/.ssh/id_rsa
      #     sed -i 's/ /\'$'\n/g' ~/.ssh/id_rsa
      #     sed -i '1s/^/-----BEGIN OPENSSH PRIVATE KEY-----/' ~/.ssh/id_rsa
      #     sed -i ':a;N;$!ba;s/\n$//;P;D' ~/.ssh/id_rsa
      #     echo "-----END OPENSSH PRIVATE KEY-----" >> ~/.ssh/id_rsa
      #     ssh-keyscan github.com >> ~/.ssh/known_hosts
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Configure Git with Token Authentication
      #   run: |
      #     git config --global url."https://x-access-token:${REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
      #   env:
      #     REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      # - name: Set up git with token authentication
      #   run: |
      #     git config --global url."https://${{ secrets.REPO_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
    
      # - name: Checkout workspace repository (CI)
      #   run: |
      #     rm -rf rust-bitvmx-workspace
      #     git clone --recurse-submodules --depth=1 --shallow-submodules https://github.com/FairgateLabs/rust-bitvmx-workspace rust-bitvmx-workspace

      # - name: Move submodule contents to root of submodule path
      #   run: |
      #     echo "Running in submodule-triggered mode"

      #     if [[ -f "${ROOT}/rust-bitvmx-workspace/.cargo/config.toml" ]]; then
      #       echo "Copying .cargo/config.toml to preserve patches"
      #       rm -f ${ROOT}/.cargo/config.toml
      #       mkdir -p "${ROOT}/.cargo"
      #       cp -f "${ROOT}/rust-bitvmx-workspace/.cargo/config.toml" "${ROOT}/.cargo/"
      #     fi

      #     find ${ROOT}/rust-bitvmx-workspace -mindepth 1 -maxdepth 1 ! -name '${{ inputs.submodule_path }}' -exec mv -f {} ${ROOT}/ \;

      # - name: Checkout current branch
      #   uses: actions/checkout@v4
      #   with:
      #     ref: ${{ github.head_ref || github.ref_name }}
      #     fetch-depth: 1

# Local test setup
      - name: Detect host for container
        run: |
          if (grep -qi microsoft /proc/version || docker info 2>/dev/null | grep -qi 'ostype: windows'); then
            echo "IS_WINDOWS_DOCKER=true" >> $GITHUB_ENV
          else
            echo "IS_WINDOWS_DOCKER=false" >> $GITHUB_ENV
          fi

      # Install libclang (required for librocksdb-sys)
      - name: Install libclang
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev clang

      - name: Install docker-compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version          

# End Local test setup

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      # - name: Cache Cargo registry and git index
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo/registry
      #       ~/.cargo/git
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      # - name: Cache Submodules Target Directory
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ${{ env.ROOT }}/${{ inputs.submodule_path }}/target
      #       ${{ env.ROOT }}/rust-bitvmx-storage-backend/target
      #       ${{ env.ROOT }}/rust-bitvmx-bitcoin-rpc/target
      #       ${{ env.ROOT }}/rust-bitvmx-settings/target
      #       ${{ env.ROOT }}/BitVMX-CPU/target
      #       ${{ env.ROOT }}/rust-bitvmx-broker/target
      #       ${{ env.ROOT }}/rust-bitcoind/target
      #       ${{ env.ROOT }}/rust-bitvmx-key-manager/target
      #       ${{ env.ROOT }}/rust-bitvmx-protocol-builder/target
      #       ${{ env.ROOT }}/rust-bitcoin-indexer/target
      #       ${{ env.ROOT }}/rust-bitvmx-transaction-monitor/target
      #       ${{ env.ROOT }}/rust-bitvmx-operator-comms/target
      #       ${{ env.ROOT }}/rust-bitvmx-wallet/target
      #       ${{ env.ROOT }}/rust-bitcoin-coordinator/target
      #       ${{ env.ROOT }}/rust-bitvmx-job-dispatcher/target
      #     key: ${{ runner.os }}-${{ inputs.submodule_path }}-target-${{ hashFiles(format('{0}/Cargo.lock', inputs.submodule_path)) }}
      #     restore-keys: |
      #       ${{ runner.os }}-${{ inputs.submodule_path }}-target-

      - name: Run docker-compose (initial cleanup)
        run: |
          echo "=== Performing initial cleanup ==="
          # Limpiar cualquier estado previo de docker
          docker-compose -f ./docker/bitcoind.docker-compose.yml down --volumes --remove-orphans || true
          docker container prune -f || true
          docker volume prune -f || true
          
          echo "=== Initial cleanup completed ==="

      - name: Build project
        run: | 
          # cd ${ROOT}/${{ inputs.submodule_path }}
          cargo build --release
          cargo build --release --example union 

      # - name: Run integration examples
      #   run: |
      #     set -e

      #     run_example() {
      #       echo "::group::🧪 Running example: $1"
            
      #       # Restart bitcoind
      #       docker compose -f ./docker/bitcoind.docker-compose.yml down bitcoind > /dev/null 2>&1 &
      #       docker compose -f ./docker/bitcoind.docker-compose.yml up bitcoind > /dev/null 2>&1 &

      #       echo "Waiting for bitcoind..."
      #       sleep 5

      #       # Clean previous state
      #       rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true
      #       LOG_DIR="./logs/$1"
      #       mkdir -p "$LOG_DIR"

      #       # Run setup
      #       RUST_BACKTRACE=full cargo run --release all --fresh \
      #         2>&1 | sed -u -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?[mGKHF]//g" > $LOG_DIR/bitvmx.log &

      #       # Wait for bitvmx clients to be ready
      #       sleep 10

      #       # Run example
      #       RUST_BACKTRACE=1 cargo run --release --example union "$1"

      #       echo "::endgroup::"
      #     }

      #     # Run all desired examples
      #     # Pre setup examples
      #     # run_example wallet_balance
      #     # run_example create_wallet

      #     # Protocol steps
      #     # run_example committee
      #     # run_example request_pegin
      #     # run_example accept_pegin
      #     run_example request_pegout
      #     # run_example advance_funds
      #     # run_example advance_funds_twice
      #     # run_example double_reimbursement
      #   env:
      #     CI: true
      #     GITHUB_ACTIONS: true

      - name: Final cleanup
        if: always()
        run: |
          echo "=== Performing final cleanup ==="
          docker-compose -f ./docker/bitcoind.docker-compose.yml down --volumes --remove-orphans || true
          docker container prune -f || true
          docker volume prune -f || true          
          echo "=== Final cleanup completed ==="