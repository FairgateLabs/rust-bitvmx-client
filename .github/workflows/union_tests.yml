name: Rust Union Tests

on:
  pull_request:
    branches: 
      - main
    paths:
      - 'examples/union/**'
      - '.github/workflows/union_tests.yml'

env:
  CARGO_TERM_COLOR: always

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ROOT: "/home/runner/work/${{ github.event.repository.name }}"
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH: ${{ github.head_ref || 'main' }}
      BITCOIN_NETWORK: "regtest"
      BITCOIND_RPC_PORT: 18443
      BITCOIND_RPC_USER: foo
      BITCOIND_RPC_PASSWORD: rpcpassword
      BITCOIND_RPC_NETWORK: regtest

    steps:
      # - name: Check disk space
      #   run: df -h

      - name: Configure SSH for Git Submodule Access
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git with Token Authentication
        run: |
          git config --global url."https://x-access-token:${REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
        env:
          REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Checkout Workspace Repository
        run: |
          # Extract branch from PR title if present (format: [branch-name])
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^\[([a-zA-Z0-9_\-\.\/]+)\] ]]; then
            BRANCH_CANDIDATE="${BASH_REMATCH[1]}"
            if [[ "$BRANCH_CANDIDATE" =~ ^[a-zA-Z0-9_\-\.\/]+$ ]] && [[ ${#BRANCH_CANDIDATE} -lt 100 ]]; then
              SAFE_BRANCH="$BRANCH_CANDIDATE"
            else
              echo "⚠️  Invalid branch name in PR title, using main"
              SAFE_BRANCH="main"
            fi
          else
            SAFE_BRANCH="main"
          fi
          
          echo "SAFE_BRANCH=$SAFE_BRANCH" >> $GITHUB_ENV
          echo "✅ Using validated branch: $SAFE_BRANCH"
          
          # Clone workspace repository
          cd ${ROOT}
          git clone --recurse-submodules --depth=1 --branch "$SAFE_BRANCH" --shallow-submodules https://github.com/FairgateLabs/rust-bitvmx-workspace rust-bitvmx-workspace
          
          # Verify clone was successful
          if [[ ! -d "rust-bitvmx-workspace" ]]; then
            echo "❌ Failed to clone workspace repository"
            exit 1
          fi

      - name: Move submodule contents to root of submodule path
        run: |
          echo "Running in submodule-triggered mode"

          if [[ -f "${ROOT}/rust-bitvmx-workspace/.cargo/config.toml" ]]; then
            echo "Copying .cargo/config.toml to preserve patches"
            rm -f ${ROOT}/.cargo/config.toml
            mkdir -p "${ROOT}/.cargo"
            cp -f "${ROOT}/rust-bitvmx-workspace/.cargo/config.toml" "${ROOT}/.cargo/"
          fi

          find ${ROOT}/rust-bitvmx-workspace -mindepth 1 -maxdepth 1 ! -name 'rust-bitvmx-client' -exec mv -f {} ${ROOT}/ \;

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 1

      - name: Install Rust Toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Cargo registry and git index
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Submodules Target Directory
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ROOT }}/rust-bitvmx-client/target
            ${{ env.ROOT }}/rust-bitvmx-storage-backend/target
            ${{ env.ROOT }}/rust-bitvmx-bitcoin-rpc/target
            ${{ env.ROOT }}/rust-bitvmx-settings/target
            ${{ env.ROOT }}/BitVMX-CPU/target
            ${{ env.ROOT }}/rust-bitvmx-broker/target
            ${{ env.ROOT }}/rust-bitcoind/target
            ${{ env.ROOT }}/rust-bitvmx-key-manager/target
            ${{ env.ROOT }}/rust-bitvmx-protocol-builder/target
            ${{ env.ROOT }}/rust-bitcoin-indexer/target
            ${{ env.ROOT }}/rust-bitvmx-transaction-monitor/target
            ${{ env.ROOT }}/rust-bitvmx-operator-comms/target
            ${{ env.ROOT }}/rust-bitvmx-wallet/target
            ${{ env.ROOT }}/rust-bitcoin-coordinator/target
            ${{ env.ROOT }}/rust-bitvmx-job-dispatcher/target
          key: ${{ runner.os }}-rust-bitvmx-client-target-${{ hashFiles('rust-bitvmx-client/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-bitvmx-client-target-

      - name: Build project
        run: | 
          cd ${ROOT}/rust-bitvmx-client
          cargo build --release
          cargo build --release --example union
          
      - name: Run integration examples
        run: |
          set -e

          run_example() {
            echo "::group::🧪 Running example: $1"

            # Set up log directory
            LOG_DIR="./logs/$1"
            mkdir -p "$LOG_DIR"

            # Start bitcoind using cargo
            echo "Starting bitcoind with setup_bitcoin_node..."
            RUST_BACKTRACE=1 cargo run --release --example union setup_bitcoin_node > $LOG_DIR/bitcoind.log 2>&1 &
            BITCOIND_PID=$!
            echo "Bitcoind started with PID: $BITCOIND_PID"

            # Wait for bitcoind to be ready (max 30 seconds)
            echo "Waiting for bitcoind to be ready..."
            BITCOIND_READY=false
            for i in {1..30}; do
              if curl --silent --user foo:rpcpassword \
                --data-binary '{"jsonrpc":"1.0","id":"healthcheck","method":"getblockchaininfo","params":[]}' \
                -H 'content-type: text/plain;' http://127.0.0.1:18443/ 2>/dev/null | grep -q "result"; then
                echo "✅ Bitcoind is ready (attempt $i)"
                BITCOIND_READY=true
                break
              fi
              echo "⏳ Waiting for bitcoind... (attempt $i/30)"
              sleep 1
            done
            
            if [ "$BITCOIND_READY" = false ]; then
              echo "❌ Bitcoind failed to start after 30 seconds"
              echo "=== Bitcoind logs ==="
              cat $LOG_DIR/bitcoind.log || echo "No logs found"
              exit 1
            fi

            # Clean previous state for this example
            rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true

            # Run setup
            RUST_BACKTRACE=full cargo run --release all --fresh \
              2>&1 | sed -u -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?[mGKHF]//g" > $LOG_DIR/bitvmx.log &

            # Wait for bitvmx clients to be ready
            sleep 10

            # Run example
            RUST_BACKTRACE=1 cargo run --release --example union "$1"

            echo "::endgroup::"
          }

          # Run all desired examples
          # Pre setup examples
          # run_example wallet_balance
          # run_example create_wallet

          # Protocol steps
          # run_example committee
          # run_example request_pegin
          # run_example accept_pegin
          run_example request_pegout
          # run_example advance_funds
          # run_example advance_funds_twice
          # run_example double_reimbursement
        working-directory: ${{ env.ROOT }}/rust-bitvmx-client
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Upload BitVMX logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: bitvmx-logs-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            ${{ env.ROOT }}/rust-bitvmx-client/logs/**/*.log
          retention-days: 7
          if-no-files-found: warn

      - name: Upload Bitcoind logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: bitcoind-logs-${{ github.run_number }}-${{ github.run_attempt }}
          path: |
            ${{ env.ROOT }}/rust-bitvmx-client/docker/
          retention-days: 7
          if-no-files-found: warn
