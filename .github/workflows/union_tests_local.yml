# GitHub Actions Debugging with act
#
# This workflow is used to debug the GitHub Actions workflow locally using `act`.
# It mirrors union_tests.yml but uses local files via --bind instead of cloning from GitHub.
#
# Prerequisites:
#   - Install act: https://nektosact.com/
#
# Usage:
#   Run from the root of the workspace:
#
#   act --pull \
#     -s SSH_PRIVATE_KEY="$(cat ~/.ssh/<YOUR_SSH_KEY_FILE>)" \
#     -s GITHUB_TOKEN=<your_github_token> \
#     -s REPO_ACCESS_TOKEN=<your_repo_token> \
#     -W rust-bitvmx-client/.github/workflows/union_tests_local.yml \
#     --bind
#
name: 'Test action (Local)'
on:
  workflow_dispatch:  # Only runs with 'act' or manual trigger

env:
  CARGO_TERM_COLOR: always

permissions:
  actions: read
  checks: write
  contents: read
  pull-requests: read

concurrency:
  group: '${{ github.workflow }} @ ${{ github.event.pull_request.head.label || github.head_ref || github.ref }}'
  cancel-in-progress: true

jobs:
  local_test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ROOT: "/home/runner/work/${{ github.event.repository.name }}"
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH: ${{ github.head_ref || 'main' }}
      BITCOIN_NETWORK: "regtest"
      BITCOIND_RPC_PORT: 18443
      BITCOIND_RPC_USER: foo
      BITCOIND_RPC_PASSWORD: rpcpassword
      BITCOIND_RPC_NETWORK: regtest

    steps:
      - name: Check disk space
        run: df -h

      - name: Setup paths for local testing
        run: |
          echo "📍 Using local workspace (mounted with --bind)"
          echo "GITHUB_WORKSPACE=$GITHUB_WORKSPACE"
          echo "ROOT=$ROOT"
          
          # The workspace root should be parent of rust-bitvmx-client
          WORKSPACE_ROOT="$(dirname $GITHUB_WORKSPACE)"
          echo "WORKSPACE_ROOT=$WORKSPACE_ROOT" >> $GITHUB_ENV
          
          echo "✅ Local workspace ready"
          echo "📁 Available submodules:"
          ls -d $WORKSPACE_ROOT/rust-* $WORKSPACE_ROOT/BitVMX-CPU 2>/dev/null | head -10 || echo "Run with: act --bind"

      # Install libclang (required for librocksdb-sys)
      - name: Install libclang
        run: |
          sudo apt-get update
          sudo apt-get install -y libclang-dev clang

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Initial cleanup
        run: |
          echo "=== Performing initial cleanup ==="
          cd $GITHUB_WORKSPACE/rust-bitvmx-client

          # Stop and remove any running bitcoind containers (if any)
          docker stop bitcoin-regtest || true

          # Clean up temp directories
          rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true

          echo "=== Initial cleanup completed ==="

      - name: Build project
        run: |
          cd $GITHUB_WORKSPACE/rust-bitvmx-client
          cargo build --release
          cargo build --release --example union

      - name: Run integration examples
        run: |
          set -e
          cd $GITHUB_WORKSPACE/rust-bitvmx-client

          run_example() {
            echo "::group::🧪 Running example: $1"

            # Set up log directory
            LOG_DIR="./logs/$1"
            mkdir -p "$LOG_DIR"

            # Start bitcoind using cargo
            echo "Starting bitcoind with setup_bitcoin_node..."
            RUST_BACKTRACE=1 cargo run --release --example union setup_bitcoin_node > $LOG_DIR/bitcoind.log 2>&1 &
            BITCOIND_PID=$!
            echo "Bitcoind started with PID: $BITCOIND_PID"

            echo "Waiting for bitcoind to be ready..."
            BITCOIND_READY=false
            for i in {1..30}; do
              if curl --silent --user foo:rpcpassword \
                --data-binary '{"jsonrpc":"1.0","id":"healthcheck","method":"getblockchaininfo","params":[]}' \
                -H 'content-type: text/plain;' http://127.0.0.1:18443/ 2>/dev/null | grep -q "result"; then
                echo "✅ Bitcoind is ready (attempt $i)"
                BITCOIND_READY=true
                break
              fi
              echo "⏳ Waiting for bitcoind... (attempt $i/30)"
              sleep 1
            done
            
            if [ "$BITCOIND_READY" = false ]; then
              echo "❌ Bitcoind failed to start after 30 seconds"
              echo "=== Bitcoind logs ==="
              cat $LOG_DIR/bitcoind.log || echo "No logs found"
              exit 1
            fi

            # Clean previous state
            rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true

            # Run setup
            RUST_BACKTRACE=full cargo run --release all --fresh \
              2>&1 | sed -u -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?[mGKHF]//g" > $LOG_DIR/bitvmx.log &

            # Wait for bitvmx clients to be ready
            sleep 10

            # Run example
            RUST_BACKTRACE=1 cargo run --release --example union "$1"

            echo "::endgroup::"
          }

          # Run all desired examples
          # Pre setup examples
          # run_example wallet_balance
          # run_example create_wallet

          # Protocol steps
          # run_example committee
          # run_example request_pegin
          # run_example accept_pegin
          run_example request_pegout
          # run_example advance_funds
          # run_example advance_funds_twice
          # run_example double_reimbursement
        env:
          CI: true
          GITHUB_ACTIONS: true

      - name: Final cleanup
        if: always()
        run: |
          echo "=== Performing final cleanup ==="
          cd $GITHUB_WORKSPACE/rust-bitvmx-client

          # Stop bitcoind container
          docker stop bitcoin-regtest || true

          # Clean up temp directories
          rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true

          # Prune unused resources
          docker container prune -f || true
          docker volume prune -f || true

          echo "=== Final cleanup completed ==="
