name: Rust Union Tests Template

on:
  workflow_call:
    inputs:
      repo: 
        description: 'Repository to check out'
        required: true
        type: string
      submodule_path:
        description: 'Path to the submodule within the repository'
        required: true
        type: string
      cargo_lock_path:
        description: 'Path to the Cargo.lock file'
        required: true
        type: string
      target_path:
        description: 'Path to the target directory'
        required: true
        type: string
      nightly:
        description: 'Flag to determine if nightly triggered'
        required: false
        type: boolean
      cargo_features:
        description: 'Cargo features to enable (space or comma separated)'
        required: false
        type: string
    secrets:
      REPO_ACCESS_TOKEN:
        description: 'Token to access the repository'
        required: true
      SSH_PRIVATE_KEY:
        description: 'Private SSH key to authenticate with GitHub'
        required: true
      SLACK_WEBHOOK_URL:
        description: 'Webhook endpoint to post on channel'
        required: false

permissions:
  contents: read
  actions: read
  checks: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 90
    env:
      ROOT: "/home/runner/work/${{ github.event.repository.name }}/${{ github.event.repository.name }}"
      REPO_NAME: ${{ github.event.repository.name }}
      BRANCH: ${{ github.head_ref || 'main' }}
      BITCOIN_NETWORK: "regtest"
      BITCOIND_RPC_PORT: 18443
      BITCOIND_RPC_USER: foo
      BITCOIND_RPC_PASSWORD: rpcpassword
      BITCOIND_RPC_NETWORK: regtest

    steps:
      - name: Debug inputs
        run: |
          echo "All inputs:"
          echo "repo=${{ inputs.repo }}"
          echo "submodule_path=${{ inputs.submodule_path }}"

      - name: Validate Inputs
        run: |
          ERRORS=()          
          
          [[ -z "${{ inputs.repo }}" ]] && ERRORS+=("'repo' input cannot be empty")
          [[ -z "${{ inputs.submodule_path }}" ]] && ERRORS+=("'submodule_path' input cannot be empty")
          [[ -z "${{ inputs.cargo_lock_path }}" ]] && ERRORS+=("'cargo_lock_path' input cannot be empty")
          [[ -z "${{ inputs.target_path }}" ]] && ERRORS+=("'target_path' input cannot be empty")          
          
          if [[ ! "${{ inputs.repo }}" =~ ^[a-zA-Z0-9_\-]+/[a-zA-Z0-9_\-]+$ ]]; then
            ERRORS+=("'repo' must be in format 'owner/repo'")
          fi
          
          if [[ ! "${{ inputs.submodule_path }}" =~ ^[a-zA-Z0-9_\-]+$ ]]; then
            ERRORS+=("'submodule_path' contains invalid characters")
          fi
          
          if [[ -n "${{ inputs.cargo_features }}" ]]; then
            if [[ ! "${{ inputs.cargo_features }}" =~ ^[a-zA-Z0-9_,-]+$ ]]; then
              ERRORS+=("'cargo_features' contains invalid characters")
            fi
          fi
          
          if [[ ${#ERRORS[@]} -gt 0 ]]; then
            printf "❌ Validation errors:\n"
            printf "  - %s\n" "${ERRORS[@]}"
            exit 1
          fi
          echo "✅ All inputs validated successfully"
      
      # - name: Cleanup Disk Space
      #   run: |
      #     echo "🧹 Cleaning up disk space..."
      #     sudo rm -rf /usr/share/dotnet
      #     sudo rm -rf /usr/local/lib/android
      #     sudo rm -rf /opt/ghc
      #     sudo rm -rf /usr/local/share/boost
      #     sudo rm -rf "$AGENT_TOOLSDIRECTORY"
      #     echo "✅ Disk cleanup completed"

      - name: Check disk space
        run: df -h

      - name: Configure SSH for Git Submodule Access
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Configure Git with Token Authentication
        run: |
          git config --global url."https://x-access-token:${REPO_TOKEN}@github.com/".insteadOf "https://github.com/"
        env:
          REPO_TOKEN: ${{ secrets.REPO_ACCESS_TOKEN }}

      - name: Checkout Workspace Repository
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          if [[ "$PR_TITLE" =~ ^\[([a-zA-Z0-9_\-\.\/]+)\] ]]; then
            BRANCH_CANDIDATE="${BASH_REMATCH[1]}"
            if [[ "$BRANCH_CANDIDATE" =~ ^[a-zA-Z0-9_\-\.\/]+$ ]] && [[ ${#BRANCH_CANDIDATE} -lt 100 ]]; then
              SAFE_BRANCH="$BRANCH_CANDIDATE"
            else
              echo "⚠️  Invalid branch name in PR title, using main"
              SAFE_BRANCH="main"
            fi
          else
            SAFE_BRANCH="main"
          fi
          
          echo "SAFE_BRANCH=$SAFE_BRANCH" >> $GITHUB_ENV
          echo "✅ Using validated branch: $SAFE_BRANCH"
          
          git clone --recurse-submodules --depth=1 --branch "$SAFE_BRANCH" --shallow-submodules https://github.com/${{ inputs.repo }} rust-bitvmx-workspace

      - name: Move submodule contents to root of submodule path
        run: |
          echo "Running in submodule-triggered mode"

          if [[ -f "/home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/rust-bitvmx-workspace/.cargo/config.toml" ]]; then
            echo "Copying .cargo/config.toml to preserve patches"
            mkdir -p "/home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/.cargo"
            cp "/home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/rust-bitvmx-workspace/.cargo/config.toml" "/home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/.cargo/"
          fi

          find /home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/rust-bitvmx-workspace -mindepth 1 -maxdepth 1 ! -name '${{ inputs.submodule_path }}' -exec mv {} /home/runner/work/${{ inputs.submodule_path }}/${{ inputs.submodule_path }}/ \;

      - name: Checkout current branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref || github.ref_name }}
          fetch-depth: 1

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache Rust Toolchain
        uses: actions/cache@v4
        with:
          path: |
            ~/.rustup
            ~/.cargo/bin
          key: ${{ runner.os }}-rustup-${{ hashFiles('**/rust-toolchain*') }}
          restore-keys: |
            ${{ runner.os }}-rustup-

      - name: Cache Cargo Registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Workspace Target Directory
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-workspace-target-${{ hashFiles('Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-workspace-target-

      - name: Cache Submodule Target Directory
        uses: actions/cache@v4
        with:
          path: ${{ inputs.submodule_path }}/target
          key: ${{ runner.os }}-${{ inputs.submodule_path }}-target-${{ hashFiles(format('{0}/Cargo.lock', inputs.submodule_path)) }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.submodule_path }}-target-

      - name: Build project
        run: | 
          cd ${{ inputs.submodule_path }}
          cargo build --release

      - name: Run integration examples
        run: |
          pwd
          find . -type d
          ls ./docker/
          set -e

          run_example() {
            echo "::group::🧪 Running example: $1 $2"
            
            # Restart bitcoind
            docker compose -f ./docker/bitcoind.docker-compose.yml down || true
            docker compose -f ./docker/bitcoind.docker-compose.yml up

            echo "Waiting for bitcoind..."
            sleep 5

            rm -rf /tmp/broker_p2p_6118* /tmp/regtest/ || true
            mkdir -p logs

            # Run setup
            RUST_BACKTRACE=full cargo run --release all --fresh \
              2>&1 | sed -u -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})*)?[mGKHF]//g" > ./logs/"$1"/bitvmx.log &

            sleep 10

            # Run example
            RUST_BACKTRACE=1 cargo run --release --example union "$1"

            echo "::endgroup::"
          }

          # Run all desired examples
          run_example wallet_balance
          run_example create_wallet
        
      